name: Build

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  Build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [ 17 ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-
    - name: Gradle Build
      run: ./gradlew build -x test

  UnitTest:
    runs-on: ubuntu-latest
    needs: Build

    strategy:
      matrix:
        java-version: [ 17 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Gradle Test
        run: ./gradlew test

  BuildDocker:
    runs-on: ubuntu-latest
    needs: UnitTest
    steps:
      - name: Build and push Docker image
        run: |
          echo "This is a mock step"

  DeployStaging:
    runs-on: ubuntu-latest
    needs: UnitTest
    environment:
      name: staging
    steps:
      - name: Deploy to Staging
        run: |
          echo "This is a mock deployment step to staging."

  TriggerIntegrationTest:
    runs-on: ubuntu-latest
    needs: DeployStaging
    steps:
      - name: Trigger Integration Tests
        run: |
          echo "This is a mock step."
#          curl -X POST \
#            -H "Accept: application/vnd.github.everest-preview+json" \
#            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#             https://api.github.com/repos/NeilDuToit92/cicd_test_1/dispatches \
#            -d '{"event_type":"run-integration-tests"}'

  TriggerPerfTest:
    runs-on: ubuntu-latest
    needs: DeployStaging
    steps:
      - name: Trigger Perf Tests
        run: |
          echo "This is a mock step."

  CheckIntegrationTests:
    runs-on: ubuntu-latest
    needs: TriggerIntegrationTest
    steps:
      - name: Poll Integration Tests Status
        run: |
          echo "This is a mock step."
#        id: poll
#        uses: benc-uk/workflow-dispatch@v1.2.3
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          owner: NeilDuToit92
#          repo: https://github.com/NeilDuToit92/cicd_test_1
#          workflow_id: integration-tests.yml
#          ref: main
#          wait_for: true
#          wait_interval: 10
#          wait_timeout: 600

  CheckPerfTests:
    runs-on: ubuntu-latest
    needs: TriggerPerfTest
    steps:
      - name: Poll Perf Tests Status
        run: |
          echo "This is a mock step."

  DeployProd:
    runs-on: ubuntu-latest
    needs: [CheckIntegrationTests, CheckPerfTests]
    environment:
      name: production
    steps:
      - name: Deploy to Production
        run: |
          echo "This is a mock deployment step to production."